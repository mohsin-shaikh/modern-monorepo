{
  "version": 3,
  "sources": ["../../../../../../../../jobs/tasks/team/delete.ts"],
  "sourcesContent": ["// import { client } from \"@pkg/engine/client\";\nimport { logger, schemaTask } from \"@trigger.dev/sdk/v3\";\nimport { z } from \"zod\";\n\nexport const deleteTeam = schemaTask({\n  id: \"delete-team\",\n  schema: z.object({\n    teamId: z.string().uuid(),\n    connections: z.array(\n      z.object({\n        provider: z.string().nullable(),\n        reference_id: z.string().nullable(),\n        access_token: z.string().nullable(),\n      }),\n    ),\n  }),\n  maxDuration: 300,\n  queue: {\n    concurrencyLimit: 10,\n  },\n  run: async ({ teamId, connections }) => {\n    // Unregister sync scheduler (Not implemented yet in Trigger.dev)\n    // await schedules.del(teamId);\n\n    // Delete connections in providers\n    // const connectionPromises = connections.map(async (connection) => {\n    //   return client.connections.delete.$post({\n    //     json: {\n    //       id: connection.reference_id,\n    //       provider: connection.provider,\n    //       accessToken: connection.access_token,\n    //     },\n    //   });\n    // });\n\n    logger.info(\"Deleting team connections\", {\n      connections: connections.length,\n    });\n\n    // await Promise.all(connectionPromises);\n  },\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;AAAA;AAIO,IAAM,aAAa,WAAW;AAAA,EACnC,IAAI;AAAA,EACJ,QAAQ,EAAE,OAAO;AAAA,IACf,QAAQ,EAAE,OAAO,EAAE,KAAK;AAAA,IACxB,aAAa,EAAE;AAAA,MACb,EAAE,OAAO;AAAA,QACP,UAAU,EAAE,OAAO,EAAE,SAAS;AAAA,QAC9B,cAAc,EAAE,OAAO,EAAE,SAAS;AAAA,QAClC,cAAc,EAAE,OAAO,EAAE,SAAS;AAAA,MACpC,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AAAA,EACD,aAAa;AAAA,EACb,OAAO;AAAA,IACL,kBAAkB;AAAA,EACpB;AAAA,EACA,KAAK,OAAO,EAAE,QAAQ,YAAY,MAAM;AAetC,WAAO,KAAK,6BAA6B;AAAA,MACvC,aAAa,YAAY;AAAA,IAC3B,CAAC;AAAA,EAGH;AACF,CAAC;",
  "names": []
}
